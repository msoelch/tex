\NeedsTeXFormat{LaTeX2e}%[2015/01/01] % fixed via latexrelease package, see below
\ProvidesPackage{mlmacros}[2018/06/26 custom frequently used machine learning commands]

\usepackage{xparse} % necessary for hacking overloaded commands and iterating overlists
\usepackage{xspace}
\usepackage{mleftright} % for nicer spacing before \left in the presence of indices
\mleftright % redefines \left and \right as \mleft and \mright
\usepackage{amsfonts} % for \mathbb
\usepackage{dsfont} % for mathbb style indicator function 1
\usepackage{soul} % provides \texthl
\usepackage{xcolor}
\usepackage{relsize} % required for smaller math subscripts
\usepackage{bm} % bold math for e.g. Greek symbols
\usepackage{amsmath}

\newcommand\numberthis{\addtocounter{equation}{1}\tag{\theequation}}

% Convenient macros with correct spacing
\DeclareRobustCommand\onedot{\futurelet\@let@token\@onedot}
\def\@onedot{\ifx\@let@token.\else.\null\fi\xspace}

\newcommand{\eg}{{e.\,g}\onedot} 
\newcommand{\Eg}{{E.\,g}\onedot}
\newcommand{\ie}{{i.\,e}\onedot} 
\newcommand{\Ie}{{I.\,e}\onedot}
\newcommand{\cf}{{cf}\onedot} 
\newcommand{\Cf}{{Cf}\onedot}
\newcommand{\etc}{{etc}\onedot} 
\newcommand{\vs}{{vs}\onedot}
\newcommand{\wrt}{w.\,r.\,t\onedot} 
\newcommand{\dof}{d.\,o.\,f\onedot}
\newcommand{\etal}{{et al}\onedot}
\newcommand{\NB}{N.\,B\onedot}
\newcommand{\transpose}{^{\!\top\!}}
\newcommand{\iid}{i.\,i.\,d\onedot}
\makeatother

\usepackage{cancel}			% easy cancelling of terms: \cancel{expression}
\renewcommand{\cancelto}[2]{\overset{#2}{\cancel{#1}}}
\usepackage{pifont}
\newcommand{\cmark}{\ding{51}\xspace}%
\newcommand{\xmark}{\ding{55}\xspace}%
\newcommand{\super}[1]{^{{(}#1{)}}}

% Math macros
\newcommand{\NN}{\ensuremath{\mathbb{N}}}
\newcommand{\RR}{\ensuremath{\mathbb{R}}}
\newcommand{\PP}{\ensuremath{\mathbb{P}}}
\newcommand{\EE}{\ensuremath{\mathbb{E}}}
\newcommand{\ind}{\ensuremath{\mathds{1}}}

\newcommand{\mcX}{\ensuremath{\mathcal{X}}}
\newcommand{\mcU}{\ensuremath{\mathcal{U}}}
\newcommand{\mcZ}{\ensuremath{\mathcal{Z}}}
\newcommand{\mcD}{\ensuremath{\mathcal{D}}}

\newcommand{\data}{\mcD}

\NewDocumentCommand{\grad}{e{_^}}{%
	\mathop{}\!% \mathop for good spacing before \nabla
	\nabla
	\IfValueT{#1}{_{\!#1}}% tuck in the subscript
	\IfValueT{#2}{^{#2}}% possible superscript
}

% https://tex.stackexchange.com/questions/5502/how-to-get-a-mid-binary-relation-that-grows
\newcommand{\relmiddle}[1]{\mathrel{}\middle#1\mathrel{}}
\DeclareDocumentCommand{\midd}{}{\relmiddle|}

\DeclareDocumentCommand{\shallbe}{}{\mathbin{\overset{!}=}}
\DeclareDocumentCommand{\dint}{}{\,\mathrm d}
\DeclareDocumentCommand{\abs}{m}{{\left\lvert#1\right\rvert}}
\DeclareDocumentCommand{\set}{m}{{\left\{#1\right\}}}
\DeclareDocumentCommand{\interval}{m}{{\left[#1\right]}}
\DeclareDocumentCommand{\divergence}{somm}{\ensuremath{\operatorname{D}
		\IfBooleanTF{#1}
		{\IfNoValueOrEmptyTF{#2}{}{_{#2}}(#3 \mid\mid #4)}
		{\IfNoValueOrEmptyTF{#2}{}{_{#2}}\mleft(#3\midd\midd#4\mright)}
}}
\DeclareDocumentCommand{\kl}{smm}{\ensuremath{\operatorname{KL}
	\IfBooleanTF{#1}
		{(#2 \mid\mid #3)}
		{\mleft(#2\midd\midd#3\mright)}
}}

% iterate over zip of two lists
% original code http://tex.stackexchange.com/questions/12187/iterating-through-two-lists
\usepackage{xstring}
\usepackage{etoolbox}

\def\forlistlooptwo#1#2#3{%
    \ifboolexpr{test{\IfSubStr{#2}{,}} and test{\IfSubStr{#3}{,}}}{%
        % Evaluate first pair and call back with reduced lists if there are at least two elements in each list..
        \forlistlooptwohelper{#1}#2;#3;%
    }{%
        \ifboolexpr{test{\notblank{#2}} and test{\notblank{#3}}}{%
            % Evaluate last pair, if there is one element in each list.
            #1{#2}{#3}%
        }{}%
    }%
}
\def\forlistlooptwohelper#1#2,#3;#4,#5;{%
    % Call the handler with the first pair as the two arguments.
    #1{#2}{#4}%
    % Call the loop macro again with the lists reduced by the first pair.
    \forlistlooptwo{#1}{#3}{#5}%
}
%\newcommand{\shortminus}{\scalebox{0.5}[1.0]{\( - \)}}
%\newcommand{\shortminus}{%
%	\setbox0=\hbox{-}%
%	\vcenter{%
%		\hrule width\wd0 height \the\fontdimen8\textfont3%
%	}%
%}
\newcommand{\shortminus}{\mathbin{\mathsmaller{-}}}
\newcommand{\shortplus}{\mathbin{\mathsmaller{+}}}
\newcommand{\tminus}{t\shortminus}
\newcommand{\tplus}{t\shortplus}
\newcommand{\Tminus}{T\shortminus}
\newcommand{\Tplus}{T\shortplus}

\DeclareDocumentCommand\tsub{m G{}}{
	_{#1\IfNoValueOrEmptyTF{#2}{}{:#2}}
}

\newcommand{\ts}{\tsub{1}{t}}
\DeclareDocumentCommand\tm{G{}}{\tsub{\tminus\IfNoValueOrEmptyTF{#1}{1}{#1}}}
\DeclareDocumentCommand\tp{G{}}{\tsub{\tplus\IfNoValueOrEmptyTF{#1}{1}{#1}}}
\DeclareDocumentCommand\tsm{G{}}{\tsub{1}{\tminus\IfNoValueOrEmptyTF{#1}{1}{#1}}}
\DeclareDocumentCommand\tsp{G{}}{\tsub{1}{\tplus\IfNoValueOrEmptyTF{#1}{1}{#1}}}

\newcommand{\Ts}{\tsub{1}{T}}
\DeclareDocumentCommand\Tm{G{}}{\tsub{\Tminus\IfNoValueOrEmptyTF{#1}{1}{#1}}}
\DeclareDocumentCommand\Tp{G{}}{\tsub{\Tplus\IfNoValueOrEmptyTF{#1}{1}{#1}}}
\DeclareDocumentCommand\Tsm{G{}}{\tsub{1}{\Tminus\IfNoValueOrEmptyTF{#1}{1}{#1}}}
\DeclareDocumentCommand\Tsp{G{}}{\tsub{1}{\Tplus\IfNoValueOrEmptyTF{#1}{1}{#1}}}


\newcommand\mlbold[1]{%
	\ifcat\noexpand#1\relax % check if the argument is a control sequence
	\bm{#1}% probably Greek
	\else
	\mathbf{#1}% single character
	\fi
}

% add macros for time indices and include bold versions for vectors/matrices
\newcommand{\varmacros}[2]{
	%base
	\expandafter\def\csname #1\endcsname{\ensuremath{#2}}
	\expandafter\def\csname b#1\endcsname{\ensuremath{\mlbold{#2}}}
	% seq
	\expandafter\def\csname #1seq\endcsname{\ensuremath{\overline{\csname #1\endcsname}}}
	\expandafter\def\csname b#1seq\endcsname{\ensuremath{\overline{\csname b#1\endcsname}}}
	% all
	\expandafter\def\csname #1all\endcsname{\ensuremath{\csname #1\endcsname\Ts}}
	\expandafter\def\csname b#1all\endcsname{\ensuremath{\csname b#1\endcsname\Ts}}
	% past
	\expandafter\def\csname #1past\endcsname{\ensuremath{\csname #1\endcsname\tsm}}
	\expandafter\def\csname b#1past\endcsname{\ensuremath{\csname b#1\endcsname\tsm}}
	% future
	\expandafter\def\csname #1future\endcsname{\ensuremath{\csname #1\endcsname\tsub{\tplus1}{T}}}
	\expandafter\def\csname b#1future\endcsname{\ensuremath{\csname b#1\endcsname\tsub{\tplus1}{T}}}
	% filter
	\expandafter\def\csname #1filter\endcsname{\ensuremath{\csname #1\endcsname\ts}}
	\expandafter\def\csname b#1filter\endcsname{\ensuremath{\csname b#1\endcsname\ts}}
}
% \variables
% loop over list and create respective commands
% can be given optional arguments if escaped characters are to be used
% e.g., \variables{a}--> \ba vs. \variables[m,a]{\mu, a} --> \bm, \ba
\DeclareDocumentCommand{\variables}{om}{\IfValueTF{#1}
                                        {\forlistlooptwo{\varmacros}{#1}{#2}}
                                        {\forlistlooptwo{\varmacros}{#2}{#2}}
                                     }


% \probdists
% dynamically create overloaded command for probability distributions
% mandatory argument is the argument of the distribution, e.g.,
% \MkProbDist{p} implies \p{x}
% first optional argument is a conditional, second optional argument parametrizes the distribution as a subscript

% define if statement that defaults to false even when the argument is just empty
% this way, the overloaded function may be used with the third argument only with a different layout (e.g., if no argument is supplied, no brackets are needed)
\ExplSyntaxOn
\DeclareExpandableDocumentCommand{\IfNoValueOrEmptyTF}{mmm}
{
	\IfNoValueTF{#1}{#2}
	{
		\tl_if_empty:nTF {#1} {#2} {#3}
	}
}
\ExplSyntaxOff

\makeatletter
\newcommand{\splitatbar}[1]{
	\protected@edef\split@temp{#1}%
	\saveexpandmode
	\expandarg\StrCut{\split@temp}{|}{\thisarg}{\thiscond}%
	\restoreexpandmode
}
\makeatother

\DeclareDocumentCommand{\overloadedfunction}{smoogmmg}{
	#2\IfNoValueOrEmptyTF{#3}{}{_{#3}}\IfNoValueOrEmptyTF{#4}{}{^{#4}}
	\IfNoValueOrEmptyTF{#5}
	{}
	{	
		\IfNoValueOrEmptyTF{#8}
			{
				\splitatbar{#5}
			}
			{ % false part is for backward compat
				\def\thisarg{#5}
				\def\thiscond{#8}
			} 
		\IfBooleanTF{#1}
		{
			\ifdefempty{\thiscond} {#6\thisarg#7} {#6\thisarg \mid \thiscond#7}
		}
		{
			\ifdefempty{\thiscond} {\mleft #6 \thisarg \mright #7} {\mleft#6 \thisarg \midd \thiscond \mright#7}
		}
	}
}
\newcommand{\MkProbDist}[2]{
	\expandafter\DeclareDocumentCommand\csname#1\endcsname{sooG{}G{}}{\ensuremath{
			\IfBooleanTF{##1}
			{\overloadedfunction*{#2}[##2][##3]{##4}{(}{)}{##5}}
			{\overloadedfunction{#2}[##2][##3]{##4}{(}{)}{##5}}
	}}
}

\DeclareDocumentCommand{\probdists}{om}{\IfValueTF{#1}
                                        {\forlistlooptwo{\MkProbDist}{#1}{#2}}
                                        {\forlistlooptwo{\MkProbDist}{#2}{#2}}
                                     }

% \mi
% overloaded command for mutual information
\DeclareDocumentCommand\mi{soG{}}{\ensuremath{
		\IfBooleanTF{#1}
		{\overloadedfunction*{\operatorname{MI}}[#2]{#3}{(}{)}}
		{\overloadedfunction{\operatorname{MI}}[#2]{#3}{(}{)}}
}}

% \expc
% overloaded command for expected value
\DeclareDocumentCommand\expc{soG{}}{\ensuremath{
	\IfBooleanTF{#1}
		{\overloadedfunction*{\EE}[#2]{#3}{[}{]}}
		{\overloadedfunction{\EE}[#2]{#3}{[}{]}}
}}

% \var
% overloaded command for variance
\DeclareDocumentCommand\var{soG{}}{\ensuremath{
	\IfBooleanTF{#1}
		{\overloadedfunction*{\operatorname{Var}}[#2]{#3}{[}{]}}
		{\overloadedfunction{\operatorname{Var}}[#2]{#3}{[}{]}}
}}

% \gauss
\DeclareDocumentCommand{\gauss}{sm}{\ensuremath{
	\IfBooleanTF{#1}
		{
			\overloadedfunction*{\mathcal{N}}{#2}{(}{)}
		}
		{
			\overloadedfunction{\mathcal{N}}{#2}{(}{)}
		}
}}

\DeclareDocumentCommand{\entropy}{m}{\ensuremath{\operatorname{\mathbb{H}}\mleft(#1\mright)}}
\DeclareDocumentCommand\entropy{soG{}}{\ensuremath{
		\IfBooleanTF{#1}
		{\overloadedfunction*{\mathbb H}[#2]{#3}{(}{)}}
		{\overloadedfunction{\mathbb H}[#2]{#3}{(}{)}}
}}
\DeclareDocumentCommand\loss{soG{}}{\ensuremath{
		\IfBooleanTF{#1}
		{\overloadedfunction*{\mathcal L}[#2]{#3}{(}{)}}
		{\overloadedfunction{\mathcal L}[#2]{#3}{(}{)}}
}}
\DeclareDocumentCommand\cost{soG{}}{\ensuremath{
		\IfBooleanTF{#1}
		{\overloadedfunction*{\mathcal C}[#2]{#3}{(}{)}}
		{\overloadedfunction{\mathcal C}[#2]{#3}{(}{)}}
}}



